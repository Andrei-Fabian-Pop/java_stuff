ID: 5703
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5703
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5703
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

File Table:

Heap:

ID: 5703
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

File Table:

Heap:

ID: 5703
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

File Table:

Heap:

ID: 5703
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

File Table:

Heap:

ID: 7402
Execution stack:
Declaration{a: Int} -> Declaration{b: Int}
 -> Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
 -> Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
 -> Print{VariableExpression{b}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7402
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}

Symbol Table:
a: 0

Out:

File Table:

Heap:

ID: 7402
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}

Symbol Table:
a: 0
b: 0

Out:

File Table:

Heap:

ID: 7402
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}

Symbol Table:
a: 17
b: 0

Out:

File Table:

Heap:

ID: 7402
Execution stack:
NopStatement
Print{VariableExpression{b}}

Symbol Table:
a: 17
b: 18

Out:

File Table:

Heap:

ID: 7402
Execution stack:
NopStatement

Symbol Table:
a: 17
b: 18

Out:
18

File Table:

Heap:

ID: 4735
Execution stack:
Declaration{a: Bool} -> Declaration{v: Int}
 -> Assignment{a = ValueExpression{true}}
 -> if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}

Symbol Table:
a: false

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}

Symbol Table:
a: false
v: 0

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}

Symbol Table:
a: true
v: 0

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
a: true
v: 0

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
a: true
v: 2

Out:

File Table:

Heap:

ID: 4735
Execution stack:
NopStatement

Symbol Table:
a: true
v: 2

Out:
2

File Table:

Heap:

ID: 6239
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{4}}
 -> While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6239
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Assignment{v = ValueExpression{4}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6239
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 4

Out:

File Table:

Heap:

ID: 4337
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:

File Table:

Heap:
d1c34dfd in 22

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:

File Table:

Heap:
d1c34dfd in 22

ID: 4377
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:

File Table:

Heap:
d1c34dfd in 22

ID: 4337
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:
10

File Table:

Heap:
d1c34dfd in 30

ID: 4377
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:
10

File Table:

Heap:
d1c34dfd in 30

ID: 4337
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 10

Out:
10
30

File Table:

Heap:
d1c34dfd in 30

ID: 4377
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 32

Out:
10
30

File Table:

Heap:
d1c34dfd in 30

ID: 4377
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
d1c34dfd in 30

ID: 4377
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{d1c34dfd in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
d1c34dfd in 30

ID: 1239
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7052
Execution stack:
Declaration{a: Int} -> Declaration{b: Int}
 -> Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
 -> Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
 -> Print{VariableExpression{b}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7052
Execution stack:
Declaration{a: Int} -> Declaration{b: Int}
 -> Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
 -> Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
 -> Print{VariableExpression{b}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 1916
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5614
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4418
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4418
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4418
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

File Table:

Heap:

ID: 4418
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

File Table:

Heap:

ID: 4418
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

File Table:

Heap:

ID: 4418
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

File Table:

Heap:

ID: 5407
Execution stack:
Declaration{varF: string} -> Assignment{varF = ValueExpression{test.in}}
 -> Open(r) file {VariableExpression{varF}}
 -> Declaration{x: Int}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> Close(r) file {VariableExpression{varF}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5407
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

File Table:

Heap:

ID: 5407
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

File Table:

Heap:

ID: 5951
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{4}}
 -> While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5951
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Assignment{v = ValueExpression{4}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5951
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{false}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 4

Out:

File Table:

Heap:

ID: 4004
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{4}}
 -> While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Assignment{v = ValueExpression{4}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 4

Out:

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 4

Out:

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 4

Out:
4

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement

Symbol Table:
v: 3

Out:
4

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 3

Out:
4

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 3

Out:
4

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 3

Out:
4
3

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement

Symbol Table:
v: 2

Out:
4
3

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 2

Out:
4
3

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2

Out:
4
3

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2

Out:
4
3
2

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement

Symbol Table:
v: 1

Out:
4
3
2

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 1

Out:
4
3
2

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1

Out:
4
3
2

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1

Out:
4
3
2
1

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}
NopStatement

Symbol Table:
v: 0

Out:
4
3
2
1

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}
While (BinaryExpression{VariableExpression{v} MORE ValueExpression{0}}) {
	Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

}

Symbol Table:
v: 0

Out:
4
3
2
1

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 0

Out:
4
3
2
1

File Table:

Heap:

ID: 4004
Execution stack:
NopStatement

Symbol Table:
v: 0

Out:
4
3
2
1
0

File Table:

Heap:

ID: 5062
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:

File Table:

Heap:
a52f0aea in 22

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:

File Table:

Heap:
a52f0aea in 22

ID: 5498
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:

File Table:

Heap:
a52f0aea in 22

ID: 5062
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:
10

File Table:

Heap:
a52f0aea in 30

ID: 5498
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:
10

File Table:

Heap:
a52f0aea in 30

ID: 5062
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 10

Out:
10
30

File Table:

Heap:
a52f0aea in 30

ID: 5498
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 32

Out:
10
30

File Table:

Heap:
a52f0aea in 30

ID: 5498
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
a52f0aea in 30

ID: 5498
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{a52f0aea in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
a52f0aea in 30

ID: 2091
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:

File Table:

Heap:
9f6de93a in 22

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:

File Table:

Heap:
9f6de93a in 22

ID: 2187
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:

File Table:

Heap:
9f6de93a in 22

ID: 2091
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:
10

File Table:

Heap:
9f6de93a in 30

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:
10

File Table:

Heap:
9f6de93a in 30

ID: 2091
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 10

Out:
10
30

File Table:

Heap:
9f6de93a in 30

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 32

Out:
10
30

File Table:

Heap:
9f6de93a in 30

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
9f6de93a in 30

ID: 2187
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{9f6de93a in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
9f6de93a in 30

ID: 3551
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3551
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3551
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

File Table:

Heap:

ID: 3551
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

File Table:

Heap:

ID: 3551
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

File Table:

Heap:

ID: 3551
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

File Table:

Heap:

ID: 5004
Execution stack:
Declaration{a: Int} -> Declaration{b: Int}
 -> Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
 -> Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
 -> Print{VariableExpression{b}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5004
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}
Declaration{b: Int}

Symbol Table:
a: 0

Out:

File Table:

Heap:

ID: 5004
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}
Assignment{a = BinaryExpression{ValueExpression{2} ADD BinaryExpression{ValueExpression{3} MULT ValueExpression{5}}}}

Symbol Table:
a: 0
b: 0

Out:

File Table:

Heap:

ID: 5004
Execution stack:
NopStatement
Print{VariableExpression{b}}
Assignment{b = BinaryExpression{VariableExpression{a} ADD ValueExpression{1}}}

Symbol Table:
a: 17
b: 0

Out:

File Table:

Heap:

ID: 5004
Execution stack:
NopStatement
Print{VariableExpression{b}}

Symbol Table:
a: 17
b: 18

Out:

File Table:

Heap:

ID: 5004
Execution stack:
NopStatement

Symbol Table:
a: 17
b: 18

Out:
18

File Table:

Heap:

ID: 3670
Execution stack:
Declaration{a: Bool} -> Declaration{v: Int}
 -> Assignment{a = ValueExpression{true}}
 -> if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3670
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}
Declaration{v: Int}

Symbol Table:
a: false

Out:

File Table:

Heap:

ID: 3670
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}
Assignment{a = ValueExpression{true}}

Symbol Table:
a: false
v: 0

Out:

File Table:

Heap:

ID: 3670
Execution stack:
NopStatement
Print{VariableExpression{v}}
if(VariableExpression{a}){
	Assignment{v = ValueExpression{2}}
}else{
	Assignment{v = ValueExpression{3}}
}

Symbol Table:
a: true
v: 0

Out:

File Table:

Heap:

ID: 3670
Execution stack:
NopStatement
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
a: true
v: 0

Out:

File Table:

Heap:

ID: 3670
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
a: true
v: 2

Out:

File Table:

Heap:

ID: 5746
Execution stack:
Declaration{varF: string} -> Assignment{varF = ValueExpression{test.in}}
 -> Open(r) file {VariableExpression{varF}}
 -> Declaration{x: Int}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> Close(r) file {VariableExpression{varF}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5746
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

File Table:

Heap:

ID: 5746
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

File Table:

Heap:

ID: 2005
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:

File Table:

Heap:
caed173a in 22

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:

File Table:

Heap:
caed173a in 22

ID: 9640
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:

File Table:

Heap:
caed173a in 22

ID: 2005
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:
10

File Table:

Heap:
caed173a in 30

ID: 9640
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:
10

File Table:

Heap:
caed173a in 30

ID: 2005
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 10

Out:
10
30

File Table:

Heap:
caed173a in 30

ID: 9640
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 32

Out:
10
30

File Table:

Heap:
caed173a in 30

ID: 9640
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
caed173a in 30

ID: 9640
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{caed173a in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
caed173a in 30

ID: 2187
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:

File Table:

Heap:
b536fecd in 22

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:

File Table:

Heap:
b536fecd in 22

ID: 6197
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:

File Table:

Heap:
b536fecd in 22

ID: 2187
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:
10

File Table:

Heap:
b536fecd in 30

ID: 6197
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:
10

File Table:

Heap:
b536fecd in 30

ID: 2187
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 10

Out:
10
30

File Table:

Heap:
b536fecd in 30

ID: 6197
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 32

Out:
10
30

File Table:

Heap:
b536fecd in 30

ID: 6197
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
b536fecd in 30

ID: 6197
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{b536fecd in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
b536fecd in 30

ID: 5109
Execution stack:
Declaration{varF: string} -> Assignment{varF = ValueExpression{test.in}}
 -> Open(r) file {VariableExpression{varF}}
 -> Declaration{x: Int}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> Close(r) file {VariableExpression{varF}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

File Table:

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

File Table:

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 100

Out:

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 100

Out:
100

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 99

Out:
100

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:
test.in

Heap:

ID: 5109
Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:

Heap:

ID: 8043
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 8043
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8043
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

File Table:

Heap:

ID: 8043
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

File Table:

Heap:

ID: 8043
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

File Table:

Heap:

ID: 8043
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

File Table:

Heap:

ID: 7720
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{57434611 in Int}
v: 10

Out:

File Table:

Heap:
57434611 in 22

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{57434611 in Int}
v: 10

Out:

File Table:

Heap:
57434611 in 22

ID: 8587
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{57434611 in Int}
v: 10

Out:

File Table:

Heap:
57434611 in 22

ID: 7720
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{57434611 in Int}
v: 10

Out:
10

File Table:

Heap:
57434611 in 30

ID: 8587
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{57434611 in Int}
v: 10

Out:
10

File Table:

Heap:
57434611 in 30

ID: 7922
Execution stack:
Declaration{varF: string} -> Assignment{varF = ValueExpression{test.in}}
 -> Open(r) file {VariableExpression{varF}}
 -> Declaration{x: Int}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> Close(r) file {VariableExpression{varF}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

File Table:

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

File Table:

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 100

Out:

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 100

Out:
100

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 99

Out:
100

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:
test.in

Heap:

ID: 7922
Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:

Heap:

ID: 4324
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:

File Table:

Heap:
3387edce in 22

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:

File Table:

Heap:
3387edce in 22

ID: 9825
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:

File Table:

Heap:
3387edce in 22

ID: 4324
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:
10

File Table:

Heap:
3387edce in 30

ID: 9825
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:
10

File Table:

Heap:
3387edce in 30

ID: 4324
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 10

Out:
10
30

File Table:

Heap:
3387edce in 30

ID: 9825
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 32

Out:
10
30

File Table:

Heap:
3387edce in 30

ID: 9825
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
3387edce in 30

ID: 9825
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{3387edce in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
3387edce in 30

ID: 3347
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:

File Table:

Heap:
4cd65e52 in 22

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:

File Table:

Heap:
4cd65e52 in 22

ID: 9401
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:

File Table:

Heap:
4cd65e52 in 22

ID: 3347
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:
10

File Table:

Heap:
4cd65e52 in 30

ID: 9401
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:
10

File Table:

Heap:
4cd65e52 in 30

ID: 3347
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 10

Out:
10
30

File Table:

Heap:
4cd65e52 in 30

ID: 9401
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 32

Out:
10
30

File Table:

Heap:
4cd65e52 in 30

ID: 9401
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
4cd65e52 in 30

ID: 9401
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{4cd65e52 in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
4cd65e52 in 30

ID: 7949
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:

File Table:

Heap:
90b1f826 in 22

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:

File Table:

Heap:
90b1f826 in 22

ID: 9192
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:

File Table:

Heap:
90b1f826 in 22

ID: 7949
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:
10

File Table:

Heap:
90b1f826 in 30

ID: 9192
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:
10

File Table:

Heap:
90b1f826 in 30

ID: 7949
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 10

Out:
10
30

File Table:

Heap:
90b1f826 in 30

ID: 9192
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 32

Out:
10
30

File Table:

Heap:
90b1f826 in 30

ID: 9192
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
90b1f826 in 30

ID: 9192
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{90b1f826 in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
90b1f826 in 30

ID: 2514
Execution stack:
Declaration{v: Reference(Int)} -> New{v: ValueExpression{20}}
 -> Print{ReadHeap{VariableExpression{v}}}
 -> WriteHeap{v: ValueExpression{30}}
 -> Print{BinaryExpression{ReadHeap{VariableExpression{v}} ADD ValueExpression{5}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2514
Execution stack:
NopStatement
Print{BinaryExpression{ReadHeap{VariableExpression{v}} ADD ValueExpression{5}}}
WriteHeap{v: ValueExpression{30}}
Print{ReadHeap{VariableExpression{v}}}
New{v: ValueExpression{20}}

Symbol Table:
v: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 2514
Execution stack:
NopStatement
Print{BinaryExpression{ReadHeap{VariableExpression{v}} ADD ValueExpression{5}}}
WriteHeap{v: ValueExpression{30}}
Print{ReadHeap{VariableExpression{v}}}

Symbol Table:
v: ReferenceValue{43bf9a15 in Int}

Out:

File Table:

Heap:
43bf9a15 in 20

ID: 2514
Execution stack:
NopStatement
Print{BinaryExpression{ReadHeap{VariableExpression{v}} ADD ValueExpression{5}}}
WriteHeap{v: ValueExpression{30}}

Symbol Table:
v: ReferenceValue{43bf9a15 in Int}

Out:
20

File Table:

Heap:
43bf9a15 in 20

ID: 2514
Execution stack:
NopStatement
Print{BinaryExpression{ReadHeap{VariableExpression{v}} ADD ValueExpression{5}}}

Symbol Table:
v: ReferenceValue{43bf9a15 in Int}

Out:
20

File Table:

Heap:
43bf9a15 in 30

ID: 2514
Execution stack:
NopStatement

Symbol Table:
v: ReferenceValue{43bf9a15 in Int}

Out:
20
35

File Table:

Heap:
43bf9a15 in 30

ID: 8663
Execution stack:
Declaration{varF: string} -> Assignment{varF = ValueExpression{test.in}}
 -> Open(r) file {VariableExpression{varF}}
 -> Declaration{x: Int}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> ReadFile {VariableExpression{varF}: x}
 -> Print{VariableExpression{x}}
 -> Close(r) file {VariableExpression{varF}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}
Assignment{varF = ValueExpression{test.in}}

Symbol Table:
varF: 

Out:

File Table:

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}
Open(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in

Out:

File Table:

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Declaration{x: Int}

Symbol Table:
varF: test.in

Out:

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 0

Out:

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 100

Out:

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}
ReadFile {VariableExpression{varF}: x}

Symbol Table:
varF: test.in
x: 100

Out:
100

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}
Print{VariableExpression{x}}

Symbol Table:
varF: test.in
x: 99

Out:
100

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement
Close(r) file {VariableExpression{varF}}

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:
test.in

Heap:

ID: 8663
Execution stack:
NopStatement

Symbol Table:
varF: test.in
x: 99

Out:
100
99

File Table:

Heap:

ID: 2577
Execution stack:
Declaration{v: Int} -> Declaration{a: Reference(Int)}
 -> Assignment{v = ValueExpression{10}}
 -> New{a: ValueExpression{22}}
 -> Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}
Declaration{a: Reference(Int)}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}
Assignment{v = ValueExpression{10}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 0

Out:

File Table:

Heap:

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}
New{a: ValueExpression{22}}

Symbol Table:
a: ReferenceValue{0 in Int}
v: 10

Out:

File Table:

Heap:

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Fork{
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement

}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:

File Table:

Heap:
e06ed37d in 22

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:

File Table:

Heap:
e06ed37d in 22

ID: 8644
Execution stack:
WriteHeap{a: ValueExpression{30}} -> Assignment{v = ValueExpression{32}}
 -> Print{VariableExpression{v}}
 -> Print{ReadHeap{VariableExpression{a}}}
 -> NopStatement


Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:

File Table:

Heap:
e06ed37d in 22

ID: 2577
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:
10

File Table:

Heap:
e06ed37d in 30

ID: 8644
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{32}}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:
10

File Table:

Heap:
e06ed37d in 30

ID: 2577
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 10

Out:
10
30

File Table:

Heap:
e06ed37d in 30

ID: 8644
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}
Print{VariableExpression{v}}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 32

Out:
10
30

File Table:

Heap:
e06ed37d in 30

ID: 8644
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{a}}}

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 32

Out:
10
30
32

File Table:

Heap:
e06ed37d in 30

ID: 8644
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{e06ed37d in Int}
v: 32

Out:
10
30
32
30

File Table:

Heap:
e06ed37d in 30

ID: 6812
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{2}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> Print{VariableExpression{v}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6812
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Assignment{v = ValueExpression{2}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6812
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:

File Table:

Heap:

ID: 6812
Execution stack:
NopStatement
Print{VariableExpression{v}}
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2

File Table:

Heap:

ID: 6812
Execution stack:
NopStatement
Print{VariableExpression{v}}

Symbol Table:
v: 2

Out:
2
2

File Table:

Heap:

ID: 6812
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
2
2
2

File Table:

Heap:

ID: 3173
Execution stack:
Declaration{v: Reference(Int)} -> New{v: ValueExpression{20}}
 -> Declaration{a: Reference(Reference(Int))}
 -> New{a: VariableExpression{v}}
 -> WriteHeap{v: ValueExpression{30}}
 -> Print{ReadHeap{ReadHeap{VariableExpression{a}}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3173
Execution stack:
NopStatement
Print{ReadHeap{ReadHeap{VariableExpression{a}}}}
WriteHeap{v: ValueExpression{30}}
New{a: VariableExpression{v}}
Declaration{a: Reference(Reference(Int))}
New{v: ValueExpression{20}}

Symbol Table:
v: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3173
Execution stack:
NopStatement
Print{ReadHeap{ReadHeap{VariableExpression{a}}}}
WriteHeap{v: ValueExpression{30}}
New{a: VariableExpression{v}}
Declaration{a: Reference(Reference(Int))}

Symbol Table:
v: ReferenceValue{f39ee3c9 in Int}

Out:

File Table:

Heap:
f39ee3c9 in 20

ID: 3173
Execution stack:
NopStatement
Print{ReadHeap{ReadHeap{VariableExpression{a}}}}
WriteHeap{v: ValueExpression{30}}
New{a: VariableExpression{v}}

Symbol Table:
a: ReferenceValue{0 in Reference(Int)}
v: ReferenceValue{f39ee3c9 in Int}

Out:

File Table:

Heap:
f39ee3c9 in 20

ID: 3173
Execution stack:
NopStatement
Print{ReadHeap{ReadHeap{VariableExpression{a}}}}
WriteHeap{v: ValueExpression{30}}

Symbol Table:
a: ReferenceValue{419ca75c in Reference(Int)}
v: ReferenceValue{f39ee3c9 in Int}

Out:

File Table:

Heap:
419ca75c in ReferenceValue{f39ee3c9 in Int}
f39ee3c9 in 20

ID: 3173
Execution stack:
NopStatement
Print{ReadHeap{ReadHeap{VariableExpression{a}}}}

Symbol Table:
a: ReferenceValue{419ca75c in Reference(Int)}
v: ReferenceValue{f39ee3c9 in Int}

Out:

File Table:

Heap:
419ca75c in ReferenceValue{f39ee3c9 in Int}
f39ee3c9 in 30

ID: 3173
Execution stack:
NopStatement

Symbol Table:
a: ReferenceValue{419ca75c in Reference(Int)}
v: ReferenceValue{f39ee3c9 in Int}

Out:
30

File Table:

Heap:
419ca75c in ReferenceValue{f39ee3c9 in Int}
f39ee3c9 in 30

ID: 8525
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6357
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6357
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6357
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 8525
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 3602
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3602
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3602
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3602
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3602
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2111
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3602
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} NOT_EQUAL ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2111
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 9097
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 9097
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 9097
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 5860
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 6030
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 8004
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} AND ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 8004
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 8004
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 6030
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 6650
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 1904
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 1904
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 1904
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 6650
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 3455
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2717
Execution stack:
Print{VariableExpression{v}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}}
} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 3455
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 4697
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Declaration{z: Int}
 -> Declaration{w: Int}
 -> Assignment{x = ValueExpression{1}}
 -> Assignment{y = ValueExpression{2}}
 -> Assignment{z = ValueExpression{3}}
 -> Assignment{w = ValueExpression{4}}
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 9396
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 9396
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 9396
Execution stack:
NopStatement

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}
Declaration{y: Int}

Symbol Table:
v: 1
x: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}
Declaration{z: Int}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}
Declaration{w: Int}

Symbol Table:
v: 1
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 1
w: 0
x: 0
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}
Assignment{y = ValueExpression{2}}

Symbol Table:
v: 1
w: 0
x: 1
y: 0
z: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}
Assignment{z = ValueExpression{3}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 0

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
Assignment{w = ValueExpression{4}}

Symbol Table:
v: 1
w: 0
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0

File Table:

Heap:

ID: 4697
Execution stack:
NopStatement

Symbol Table:
v: 1
w: 4
x: 1
y: 2
z: 3

Out:
0
10

File Table:

Heap:

ID: 7095
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6576
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{false}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6576
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6576
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 7095
Execution stack:
NopStatement

Symbol Table:
v: 1

Out:
0
10

File Table:

Heap:

ID: 2098
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5231
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 5231
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 5231
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6561
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 6561
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0
1

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 6561
Execution stack:
NopStatement

Symbol Table:
v: 0

Out:
0
1

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 7187
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 7187
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1
2

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 7187
Execution stack:
NopStatement

Symbol Table:
v: 1

Out:
0
1
2

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 1484
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 1484
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 3

Out:
0
1
2
3

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 1484
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
0
1
2
3

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 6734
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 6734
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 4

Out:
0
1
2
3
4

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 6734
Execution stack:
NopStatement

Symbol Table:
v: 3

Out:
0
1
2
3
4

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 4852
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 4852
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 5

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 4852
Execution stack:
NopStatement

Symbol Table:
v: 4

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 4728
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 4728
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 4728
Execution stack:
NopStatement

Symbol Table:
v: 5

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 6784
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 6784
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 6784
Execution stack:
NopStatement

Symbol Table:
v: 6

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 1837
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 1837
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 1837
Execution stack:
NopStatement

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 6036
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 10

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 6036
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 10

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 6036
Execution stack:
NopStatement

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 10

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 3525
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 10

Out:
0
1
2
3
4
5
6
7
8
9

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 11

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 3525
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 10

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 11

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 3525
Execution stack:
NopStatement

Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 11

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 4219
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 11

Out:
0
1
2
3
4
5
6
7
8
9
10

File Table:

Heap:

ID: 2098
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (BinaryExpression{BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}} OR ValueExpression{true}}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 12

Out:
0
1
2
3
4
5
6
7
8
9
10
11

File Table:

Heap:

ID: 4219
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 11

Out:
0
1
2
3
4
5
6
7
8
9
10
11

File Table:

Heap:

ID: 2384
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2384
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2384
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5824
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 2325
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2325
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2325
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2411
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2411
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0
1

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2411
Execution stack:
NopStatement

Symbol Table:
v: 0

Out:
0
1

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2871
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 2871
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1
2

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 2871
Execution stack:
NopStatement

Symbol Table:
v: 1

Out:
0
1
2

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 5025
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 5025
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 3

Out:
0
1
2
3

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 5025
Execution stack:
NopStatement

Symbol Table:
v: 2

Out:
0
1
2
3

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 4711
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 4

Out:
0
1
2
3

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 4711
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 4

Out:
0
1
2
3
4

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 4711
Execution stack:
NopStatement

Symbol Table:
v: 3

Out:
0
1
2
3
4

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 3630
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 5

Out:
0
1
2
3
4

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 3630
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 5

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 3630
Execution stack:
NopStatement

Symbol Table:
v: 4

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 4652
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 6

Out:
0
1
2
3
4
5

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 4652
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 6

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 4652
Execution stack:
NopStatement

Symbol Table:
v: 5

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 9967
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 9967
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 7

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 9967
Execution stack:
NopStatement

Symbol Table:
v: 6

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 9992
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7

File Table:

Heap:

ID: 5824
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (ValueExpression{true}) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 9

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 9992
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 8

Out:
0
1
2
3
4
5
6
7
8

File Table:

Heap:

ID: 4557
Execution stack:
Declaration{v: Int} -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6851
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6851
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0

Out:
0

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 6851
Execution stack:
NopStatement

Symbol Table:
v: -1

Out:
0

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 2842
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1

Out:
0

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2842
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1

Out:
0
1

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 2842
Execution stack:
NopStatement

Symbol Table:
v: 0

Out:
0
1

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 6348
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2

Out:
0
1

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 6348
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2

Out:
0
1
2

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 3

Out:
0
1
2

File Table:

Heap:

ID: 6348
Execution stack:
NopStatement

Symbol Table:
v: 1

Out:
0
1
2

File Table:

Heap:

ID: 4557
Execution stack:
NopStatement

Symbol Table:
v: 3

Out:
0
1
2
30

File Table:

Heap:

ID: 2216
Execution stack:
Declaration{cnt: Int} -> Declaration{v1: Reference(Int)}
 -> Declaration{v2: Reference(Int)}
 -> Declaration{v3: Reference(Int)}
 -> New{v1: ValueExpression{2}}
 -> New{v2: ValueExpression{3}}
 -> New{v3: ValueExpression{4}}
 -> CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
 -> Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
 -> Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
 -> Await{var='cnt'}
 -> Print{ReadHeap{VariableExpression{v3}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}
Declaration{v1: Reference(Int)}

Symbol Table:
cnt: 0

Out:

File Table:

Heap:

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{v3: Reference(Int)}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}

Symbol Table:
cnt: 0
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
2b27c0de in 2

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}

Symbol Table:
cnt: 0
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})

Symbol Table:
cnt: 0
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}
Fork{
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 4713
Execution stack:
Await{var='cnt'} -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement


Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 4713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
Await{var='cnt'}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 4299
Execution stack:
Await{var='cnt'} -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement


Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{var='cnt'}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 4713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 4299
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
Await{var='cnt'}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 2
f09e318d in 3

ID: 2216
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 3

ID: 4713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 3

ID: 4299
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 3

ID: 2216
Execution stack:
NopStatement

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:
4
20

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 30

ID: 4713
Execution stack:
NopStatement

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:
4
20

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 30

ID: 4299
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:
4
20

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 30

ID: 4299
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:
4
20

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 300

ID: 4299
Execution stack:
NopStatement

Symbol Table:
cnt: -7338
v1: ReferenceValue{2b27c0de in Int}
v2: ReferenceValue{f09e318d in Int}
v3: ReferenceValue{cd2b556e in Int}

Out:
4
20
300

File Table:

Heap:
cd2b556e in 4
2b27c0de in 20
f09e318d in 300

ID: 6323
Execution stack:
Declaration{v: Int} -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Assignment{x = ValueExpression{1}}
 -> NopStatement
 -> Assignment{y = ValueExpression{3}}
 -> NopStatement
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}
Declaration{y: Int}

Symbol Table:
v: 0
x: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 5806
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 5806
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 5806
Execution stack:
NopStatement

Symbol Table:
v: -1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 9607
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 9607
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 9607
Execution stack:
NopStatement

Symbol Table:
v: 0
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 4216
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 3
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 4216
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 3
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 4216
Execution stack:
NopStatement

Symbol Table:
v: 1
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement

Symbol Table:
v: 3
x: 1
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}

Symbol Table:
v: 3
x: 1
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement

Symbol Table:
v: 3
x: 1
y: 3

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 3
x: 1
y: 3

Out:
0
1
2

File Table:

Heap:

ID: 6323
Execution stack:
NopStatement

Symbol Table:
v: 3
x: 1
y: 3

Out:
0
1
2
30

File Table:

Heap:

ID: 8901
Execution stack:
Declaration{v1: Reference(Int)} -> Declaration{v2: Reference(Int)}
 -> Declaration{v3: Reference(Int)}
 -> Declaration{cnt: Int}
 -> New{v1: ValueExpression{2}}
 -> New{v2: ValueExpression{3}}
 -> New{v3: ValueExpression{4}}
 -> CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
 -> Await{ var='cnt' }
 -> Print{ReadHeap{VariableExpression{v3}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}

Symbol Table:
cnt: 0
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}

Symbol Table:
cnt: 0
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})

Symbol Table:
cnt: 0
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8213
Execution stack:
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement


Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8213
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 2937
Execution stack:
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement


Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8213
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 2937
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 2
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 3
d12daf5 in 4

ID: 8213
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 3
d12daf5 in 4

ID: 2937
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 3
d12daf5 in 4

ID: 8901
Execution stack:
NopStatement

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:
4
20

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 30
d12daf5 in 4

ID: 8213
Execution stack:
NopStatement

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:
4
20

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 30
d12daf5 in 4

ID: 2937
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:
4
20

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 30
d12daf5 in 4

ID: 2937
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:
4
20

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 300
d12daf5 in 4

ID: 2937
Execution stack:
NopStatement

Symbol Table:
cnt: 8236
v1: ReferenceValue{7bfc2c65 in Int}
v2: ReferenceValue{c25b870f in Int}
v3: ReferenceValue{d12daf5 in Int}

Out:
4
20
300

File Table:

Heap:
7bfc2c65 in 20
c25b870f in 300
d12daf5 in 4

ID: 3854
Execution stack:
Declaration{v1: Reference(Int)} -> Declaration{v2: Reference(Int)}
 -> Declaration{v3: Reference(Int)}
 -> Declaration{cnt: Int}
 -> New{v1: ValueExpression{2}}
 -> New{v2: ValueExpression{3}}
 -> New{v3: ValueExpression{4}}
 -> CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
 -> Await{ var='cnt' }
 -> Print{ReadHeap{VariableExpression{v3}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}

Symbol Table:
cnt: 0
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
4998db13 in 2

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}

Symbol Table:
cnt: 0
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})

Symbol Table:
cnt: 0
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 5621
Execution stack:
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement


Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 5621
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 8604
Execution stack:
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement


Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 5621
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 8604
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 2
cafb937f in 4

ID: 3854
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 20
cafb937f in 4

ID: 5621
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 20
cafb937f in 4

ID: 8604
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:

File Table:

Heap:
91cd6e7f in 3
4998db13 in 20
cafb937f in 4

ID: 3854
Execution stack:
NopStatement

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:
4
20

File Table:

Heap:
91cd6e7f in 30
4998db13 in 20
cafb937f in 4

ID: 5621
Execution stack:
NopStatement

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:
4
20

File Table:

Heap:
91cd6e7f in 30
4998db13 in 20
cafb937f in 4

ID: 8604
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:
4
20

File Table:

Heap:
91cd6e7f in 30
4998db13 in 20
cafb937f in 4

ID: 8604
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:
4
20

File Table:

Heap:
91cd6e7f in 300
4998db13 in 20
cafb937f in 4

ID: 8604
Execution stack:
NopStatement

Symbol Table:
cnt: 3454
v1: ReferenceValue{4998db13 in Int}
v2: ReferenceValue{91cd6e7f in Int}
v3: ReferenceValue{cafb937f in Int}

Out:
4
20
300

File Table:

Heap:
91cd6e7f in 300
4998db13 in 20
cafb937f in 4

ID: 3812
Execution stack:
Declaration{v1: Reference(Int)} -> Declaration{v2: Reference(Int)}
 -> Declaration{v3: Reference(Int)}
 -> Declaration{cnt: Int}
 -> New{v1: ValueExpression{2}}
 -> New{v2: ValueExpression{3}}
 -> New{v3: ValueExpression{4}}
 -> CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
 -> Await{ var='cnt' }
 -> Print{ReadHeap{VariableExpression{v3}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}

Symbol Table:
cnt: 0
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}

Symbol Table:
cnt: 0
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})

Symbol Table:
cnt: 0
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 5873
Execution stack:
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement


Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 5873
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 2486
Execution stack:
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement


Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 5873
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 2486
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 2

ID: 3812
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 20

ID: 5873
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 20

ID: 2486
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:

File Table:

Heap:
bb6561dc in 3
3dc657c1 in 4
1ab006c6 in 20

ID: 3812
Execution stack:
NopStatement

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:
4
20

File Table:

Heap:
bb6561dc in 30
3dc657c1 in 4
1ab006c6 in 20

ID: 5873
Execution stack:
NopStatement

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:
4
20

File Table:

Heap:
bb6561dc in 30
3dc657c1 in 4
1ab006c6 in 20

ID: 2486
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:
4
20

File Table:

Heap:
bb6561dc in 30
3dc657c1 in 4
1ab006c6 in 20

ID: 2486
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:
4
20

File Table:

Heap:
bb6561dc in 300
3dc657c1 in 4
1ab006c6 in 20

ID: 2486
Execution stack:
NopStatement

Symbol Table:
cnt: 7398
v1: ReferenceValue{1ab006c6 in Int}
v2: ReferenceValue{bb6561dc in Int}
v3: ReferenceValue{3dc657c1 in Int}

Out:
4
20
300

File Table:

Heap:
bb6561dc in 300
3dc657c1 in 4
1ab006c6 in 20

ID: 6419
Execution stack:
Declaration{v: Int} -> Declaration{x: Int}
 -> Declaration{y: Int}
 -> Assignment{v = ValueExpression{0}}
 -> repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
 -> Assignment{x = ValueExpression{1}}
 -> NopStatement
 -> Assignment{y = ValueExpression{3}}
 -> NopStatement
 -> Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}
Declaration{y: Int}
Declaration{x: Int}

Symbol Table:
v: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}
Declaration{y: Int}

Symbol Table:
v: 0
x: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});
Assignment{v = ValueExpression{0}}

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
repeat
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

until (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}});

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 3931
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 0
x: 0
y: 0

Out:

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 3931
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 0
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 3931
Execution stack:
NopStatement

Symbol Table:
v: -1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 8183
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 1
x: 0
y: 0

Out:
0

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 8183
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 1
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}


Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 8183
Execution stack:
NopStatement

Symbol Table:
v: 0
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}
Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6345
Execution stack:
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement


Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}
While (NOT (BinaryExpression{VariableExpression{v} EQUAL ValueExpression{3}})) {
	Fork{
Print{VariableExpression{v}} -> Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}
 -> NopStatement

} -> Assignment{v = BinaryExpression{VariableExpression{v} ADD ValueExpression{1}}}

}

Symbol Table:
v: 3
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6345
Execution stack:
NopStatement
Assignment{v = BinaryExpression{VariableExpression{v} SUBSTR ValueExpression{1}}}

Symbol Table:
v: 2
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement
Assignment{x = ValueExpression{1}}

Symbol Table:
v: 3
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6345
Execution stack:
NopStatement

Symbol Table:
v: 1
x: 0
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}
NopStatement

Symbol Table:
v: 3
x: 1
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement
Assignment{y = ValueExpression{3}}

Symbol Table:
v: 3
x: 1
y: 0

Out:
0
1
2

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}
NopStatement

Symbol Table:
v: 3
x: 1
y: 3

Out:
0
1
2

File Table:

Heap:

ID: 6419
Execution stack:
NopStatement
Print{BinaryExpression{VariableExpression{v} MULT ValueExpression{10}}}

Symbol Table:
v: 3
x: 1
y: 3

Out:
0
1
2

File Table:

Heap:

ID: 7510
Execution stack:
Declaration{v1: Reference(Int)} -> Declaration{v2: Reference(Int)}
 -> Declaration{v3: Reference(Int)}
 -> Declaration{cnt: Int}
 -> New{v1: ValueExpression{2}}
 -> New{v2: ValueExpression{3}}
 -> New{v3: ValueExpression{4}}
 -> CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
 -> Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
 -> Await{ var='cnt' }
 -> Print{ReadHeap{VariableExpression{v3}}}
 -> NopStatement


Symbol Table:

Out:

File Table:

Heap:

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}
Declaration{v2: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}
Declaration{v3: Reference(Int)}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}
Declaration{cnt: Int}

Symbol Table:
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}
New{v1: ValueExpression{2}}

Symbol Table:
cnt: 0
v1: ReferenceValue{0 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}
New{v2: ValueExpression{3}}

Symbol Table:
cnt: 0
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{0 in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})
New{v3: ValueExpression{4}}

Symbol Table:
cnt: 0
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{0 in Int}

Out:

File Table:

Heap:
1a75fcce in 3
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}
CyclicBarrier(cnt, ReadHeap{VariableExpression{v2}})

Symbol Table:
cnt: 0
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}
Fork{
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement

}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }
Fork{
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement

}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 5713
Execution stack:
Await{ var='cnt' } -> WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v1}}}
 -> NopStatement


Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 5713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 9066
Execution stack:
Await{ var='cnt' } -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
 -> Print{ReadHeap{VariableExpression{v2}}}
 -> NopStatement


Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}
Await{ var='cnt' }

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 5713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}
WriteHeap{v1: BinaryExpression{ReadHeap{VariableExpression{v1}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 9066
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
Await{ var='cnt' }

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 2

ID: 7510
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v3}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 20

ID: 5713
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v1}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 20

ID: 9066
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:

File Table:

Heap:
1a75fcce in 3
a7f2cb6c in 4
23d9071 in 20

ID: 7510
Execution stack:
NopStatement

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:
4
20

File Table:

Heap:
1a75fcce in 30
a7f2cb6c in 4
23d9071 in 20

ID: 5713
Execution stack:
NopStatement

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:
4
20

File Table:

Heap:
1a75fcce in 30
a7f2cb6c in 4
23d9071 in 20

ID: 9066
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}
WriteHeap{v2: BinaryExpression{ReadHeap{VariableExpression{v2}} MULT ValueExpression{10}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:
4
20

File Table:

Heap:
1a75fcce in 30
a7f2cb6c in 4
23d9071 in 20

ID: 9066
Execution stack:
NopStatement
Print{ReadHeap{VariableExpression{v2}}}

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:
4
20

File Table:

Heap:
1a75fcce in 300
a7f2cb6c in 4
23d9071 in 20

ID: 9066
Execution stack:
NopStatement

Symbol Table:
cnt: -2629
v1: ReferenceValue{23d9071 in Int}
v2: ReferenceValue{1a75fcce in Int}
v3: ReferenceValue{a7f2cb6c in Int}

Out:
4
20
300

File Table:

Heap:
1a75fcce in 300
a7f2cb6c in 4
23d9071 in 20

